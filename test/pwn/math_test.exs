defmodule Pwn.MathTest do
  use ExUnit.Case, async: true

  doctest Pwn.Math

  describe "in the workflow of decoding an RSA encrypted message" do
    setup do
      [
        p: 115502906812186413716028212900548735990904256575141882752425616464266991765240920703188618324966988373216520827723741484031611192826120314542453727041306942082909556327966471790487878679927202639569020757238786152140574636623998668929044300958627146625246115304479897191050159379832505990011874114710868929959,
        q: 151086174643947302290817794140091756798645765602409645643205831091644137498519425104335688550286307690830177161800083588667379385673705979813357923016141205953591742544325170678167010991535747769057335224460619777264606691069942245683132083955765987513089646708001710658474178826337742596489996782669571549253,
        n: 17450892350509567071590987572582143158927907441748820483575144211411640241849663641180283816984167447652133133054833591585389505754635416604577584488321462013117163124742030681698693455489404696371546386866372290759608301392572928615767980244699473803730080008332364994345680261823712464595329369719516212105135055607592676087287980208987076052877442747436020751549591608244950255761481664468992126299001817410516694015560044888704699389291971764957871922598761298482950811618390145762835363357354812871474680543182075024126064364949000115542650091904557502192704672930197172086048687333172564520657739528469975770627,
        e: 65537,
        m: "50fb0b3f17315f7dfa25378fa0b06c8d955fad0493365669bbaa524688128ee9099ab713a3369a5844bdd99a5db98f333ef55159d3025630c869216889be03120e3a4bd6553d7111c089220086092bcffc5e42f1004f9888f25892a7ca007e8ac6de9463da46f71af4c8a8f806bee92bf79a8121a7a34c3d564ac7f11b224dc090d97fdb427c10867ad177ec35525b513e40bef3b2ba3e6c97cb31d4fe3a6231fdb15643b84a1ce704838d8b99e5b0737e1fd30a9cc51786dcac07dcb9c0161fc754cda5380fdf3147eb4fbe49bc9821a0bcad98d6df9fbdf63cf7d7a5e4f6cbea4b683dfa965d0bd51f792047e393ddd7b7d99931c3ed1d033cebc91968d43f",
        d: 17132426945452737460567858330523332972039923901148372045313461917793556995298063816427066253697580263811066999006378810690076539813525143655570538223646050130246599517967361888569443758787307743247961702204392321280558428367174798969545869004138255397802723313793928560983801726139424808650504096573285206876105741867313903180044851849908229097633628421133942174450294500799448654012083057875665669309602264552134306030352265425357024438030081201825032576950129383598196562241126749781815857567846686951220288548611569223849677823214791095824764770762381030638969591182946078071047090150303736965676224782839186874361
      ]
    end

    test "sanity check p * q === n", c do
      assert c.p * c.q === c.n
    end

    test "computing `e` by modular multiplicative inverse", c do
      d = Pwn.Math.modular_multiplicative_inverse(c.e, (c.p - 1) * (c.q - 1))

      assert d === c.d
    end

    test ":crypto.mod_pow/1 with d and n decodes the message", c do
      {m, ""} = Integer.parse(c.m, 16)

      assert :crypto.mod_pow(m, c.d, c.n) =~ ~r/CTF{\w+}/
    end
  end
end
